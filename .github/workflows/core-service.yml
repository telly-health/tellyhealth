# This is a basic workflow to help you get started with Actions

name: CORE SERVICE CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: ["master"]
  pull_request:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow checks if the package has changed to trigger subsequent pipeline
  check:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    outputs:
      status: ${{ steps.early.conclusion }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checkout the source code
      - name: 'Checkout source code'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # Check for package changes
      - name: Check for package changes
        id: early
        run: ./ci/check-package.sh "core-api"

  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    needs: check
    if: needs.check.outputs.status == 'success'

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      # Checkout the source code
      - name: 'Checkout source code'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # Check for package changes
      - name: Run test
        run: echo "Running test"

  deploy:
     # The type of runner that the job will run on
    name: Deploy to Amazon ECS
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./packages/service/core

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS }}
          aws-region: us-east-2
      
      - name: Create env file
        run: |
          touch .env
          echo ZOOM_CLIENT_SECRET=${{ secrets.ZOOM_SDK_SECRET }} >> .env
          echo ZOOM_CLIENT_ID=${{ secrets.ZOOM_SDK_KEY }} >> .env
          echo ZOOM_APP_TYPE="account" >> .env
          echo TWILIO_ACCOUNT_SID=${{ secrets.TWILLIO_ACCOUNT_ID }} >> .env
          echo TWILIO_AUTH_TOKEN=${{ secrets.TWILLIO_AUTH_TOKEN }} >> .env
          echo TWILIO_MOBILE_NUMBER=${{ secrets.TWILLIO_MOBILE_NUMBER }} >> .env
          echo FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }} >> .env
          echo FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }} >> .env
          echo FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }} >> .env
          echo FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }} >> .env
          echo FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }} >> .env
          echo FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }} >> .env
          echo APP_PORT=8080 >> .env
      
      - name: Create firebase service client
        run: |
          touch service-account.json
          json='${{ secrets.FIREBASE_SERVICE_CLIENT }}' 
          echo $json > service-account.json
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: tellyhealth-core-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Download task definition
        run: aws ecs describe-task-definition --task-definition tellyhealth-core-api-task --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: update-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: packages/service/core/task-definition.json
          container-name: tellyhealth-core-api-container
          image: ${{ steps.push-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        id: deploy-task-def
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.update-task-def.outputs.task-definition }}
          service: tellyhealth-core-api-service
          cluster: tellyhealth-prod
          wait-for-service-stability: true